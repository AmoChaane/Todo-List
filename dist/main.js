(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(n){e(1,arguments);var o=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===o?new Date(n.getTime()):"number"==typeof n||"[object Number]"===o?new Date(n):("string"!=typeof n&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(t){e(1,arguments);var o=n(t);return o.setHours(0,0,0,0),o}function a(t,n){e(2,arguments);var a=o(t),s=o(n);return a.getTime()===s.getTime()}function s(t){return e(1,arguments),a(t,Date.now())}Math.pow(10,8);var r=36e5;function c(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function d(t,n){var o;e(1,arguments);var a=c(null!==(o=null==n?void 0:n.additionalDigits)&&void 0!==o?o:2);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var s,r=m(t);if(r.date){var d=v(r.date,a);s=y(d.restDateString,d.year)}if(!s||isNaN(s.getTime()))return new Date(NaN);var i,l=s.getTime(),u=0;if(r.time&&(u=k(r.time),isNaN(u)))return new Date(NaN);if(!r.timezone){var p=new Date(l+u),f=new Date(0);return f.setFullYear(p.getUTCFullYear(),p.getUTCMonth(),p.getUTCDate()),f.setHours(p.getUTCHours(),p.getUTCMinutes(),p.getUTCSeconds(),p.getUTCMilliseconds()),f}return i=g(r.timezone),isNaN(i)?new Date(NaN):new Date(l+u+i)}var i={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},l=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,u=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,p=/^([+-])(\d{2})(?::?(\d{2}))?$/;function m(e){var t,n={},o=e.split(i.dateTimeDelimiter);if(o.length>2)return n;if(/:/.test(o[0])?t=o[0]:(n.date=o[0],t=o[1],i.timeZoneDelimiter.test(n.date)&&(n.date=e.split(i.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=i.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function v(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),o=e.match(n);if(!o)return{year:NaN,restDateString:""};var a=o[1]?parseInt(o[1]):null,s=o[2]?parseInt(o[2]):null;return{year:null===s?a:100*s,restDateString:e.slice((o[1]||o[2]).length)}}function y(e,t){if(null===t)return new Date(NaN);var n=e.match(l);if(!n)return new Date(NaN);var o=!!n[4],a=f(n[1]),s=f(n[2])-1,r=f(n[3]),c=f(n[4]),d=f(n[5])-1;if(o)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,c,d)?function(e,t,n){var o=new Date(0);o.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+a),o}(t,c,d):new Date(NaN);var i=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(x[t]||(h(e)?29:28))}(t,s,r)&&function(e,t){return t>=1&&t<=(h(e)?366:365)}(t,a)?(i.setUTCFullYear(t,s,Math.max(a,r)),i):new Date(NaN)}function f(e){return e?parseInt(e):1}function k(e){var t=e.match(u);if(!t)return NaN;var n=E(t[1]),o=E(t[2]),a=E(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,o,a)?n*r+6e4*o+1e3*a:NaN}function E(e){return e&&parseFloat(e.replace(",","."))||0}function g(e){if("Z"===e)return 0;var t=e.match(p);if(!t)return 0;var n="+"===t[1]?-1:1,o=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(o*r+6e4*a):NaN}var x=[31,null,31,30,31,30,31,31,30,31,30,31];function h(e){return e%400==0||e%4==0&&e%100!=0}function _(t,o){e(2,arguments);var a=n(t),s=c(o);return isNaN(s)?new Date(NaN):s?(a.setDate(a.getDate()+s),a):a}function L(t){return e(1,arguments),a(t,_(Date.now(),1))}var C={};function b(){return C}function w(t,o){var a,s,r,d,i,l,u,p;e(1,arguments);var m=b(),v=c(null!==(a=null!==(s=null!==(r=null!==(d=null==o?void 0:o.weekStartsOn)&&void 0!==d?d:null==o||null===(i=o.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:m.weekStartsOn)&&void 0!==s?s:null===(u=m.locale)||void 0===u||null===(p=u.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==a?a:0);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var y=n(t),f=y.getDay(),k=(f<v?7:0)+f-v;return y.setDate(y.getDate()-k),y.setHours(0,0,0,0),y}function T(t,n,o){e(2,arguments);var a=w(t,o),s=w(n,o);return a.getTime()===s.getTime()}function S(t,n){return e(1,arguments),T(t,Date.now(),n)}const j=document.body.scrollHeight;function D(){const e=document.querySelector("#content"),t=document.querySelector(".overlay"),n=document.querySelector(".overlay2"),o=document.querySelector(".add-task"),a=document.querySelector("#close-task-form"),s=document.querySelector("#close-project-form"),r=document.querySelector(".plus"),c=document.querySelector(".today"),d=document.querySelector(".tomorrow"),i=document.querySelector(".this-week"),l=document.querySelector(".completed-tasks"),u=document.querySelector(".add-project"),p=document.querySelector(".add"),m=document.querySelector("#task-input-text"),v=document.querySelector("#task-input-date"),y=document.querySelector("#task-input-textarea"),f=document.querySelector("#task-input-priority"),k=document.querySelector("#task-input-project"),E=document.querySelector("#project-input-text"),g=document.querySelector("#tasks-section-h2"),x=document.querySelector(".tasks-section"),h=document.querySelector(".projects"),_=document.querySelector(".all-tasks");return{content:e,todays_date:new Date,all_tasks:_,projects:h,tasks_section:x,project_input_text:E,task_input_project:k,task_input_priority:f,task_input_priority:f,task_input_textarea:y,task_input_date:v,task_input_text:m,add_project_btn:p,submit_project:u,completed_tasks:l,this_week:i,tomorrow:d,today:c,plus:r,close_project:s,close_task:a,add_task:o,overlay2:n,overlay:t,h2:g}}document.body.style.height=`${j}px`;const N=[],q=[],M=[],O=[];function H(e,t,n,o,a){this.title=e,this.desc=n,this.due=t,this.priority=o,this.project=a}function U(e){const t=document.createElement("div");t.classList.add("task"),"Low"==e.priority?t.style.borderLeft="14px solid blue":"Medium"==e.priority?t.style.borderLeft="14px solid orange":t.style.borderLeft="14px solid red";const n=document.createElement("div");n.classList.add("info");const o=document.createElement("div");o.classList.add("radio");const a=document.createElement("input");a.type="radio",o.append(a),n.append(o);const s=document.createElement("div");s.classList.add("title-desc");const r=document.createElement("h3");r.classList.add("h3"),r.textContent=e.title;const c=document.createElement("p");c.classList.add("p"),c.textContent=e.desc,s.append(r,c),n.append(s);const d=document.createElement("div");d.classList.add("icons");const i=document.createElement("div");i.classList.add("date"),i.textContent=e.due,d.append(i);const l=document.createElement("i");l.classList.add("fa-solid","fa-pencil");const u=document.createElement("i");return u.classList.add("fa-solid","fa-trash-can"),d.append(l,u),t.append(n,d),a.addEventListener("click",(n=>{setTimeout((()=>{t.remove()}),150),N.splice(N.indexOf(e),1),q.push(e),O.splice(O.indexOf(e.title),1)})),r.addEventListener("click",(t=>{q.includes(e)?D().content.append(P(e,r,c,i,"none").overlay3):D().content.append(P(e,r,c,i,"flex").overlay3)})),u.addEventListener("click",(n=>{t.remove(),N.splice(N.indexOf(e),1),q.splice(q.indexOf(e),1),O.splice(O.indexOf(e.title),1)})),l.addEventListener("click",(t=>{D().content.append(F(e,r,c,i).overlay_edit)})),q.includes(e)&&(l.style.display="none",a.style.display="none",s.style.paddingLeft="15px"),t}function $(e,t){document.querySelector(".tasks").remove();const n=document.createElement("div");n.classList.add("tasks"),D().tasks_section.append(n);for(let o=0;o<e.length;o++)(s(d(e[o].due))&&" Today"==t||L(d(e[o].due))&&" Tomorrow"==t||S(d(e[o].due))&&" This Week"==t||" Completed Tasks"==t||" All Tasks"==t)&&n.append(U(e[o]))}function I(){document.querySelectorAll(".project p").forEach((e=>{e.addEventListener("click",(t=>{D().h2.textContent=e.innerText,D().today.style.backgroundColor="",D().tomorrow.style.backgroundColor="",D().this_week.style.backgroundColor="",D().completed_tasks.style.backgroundColor="",document.querySelector(".tasks").remove();const n=document.createElement("div");n.classList.add("tasks"),D().tasks_section.append(n);for(let e=0;e<N.length;e++)if(N[e].project==t.target.textContent){const t=U(N[e]);n.append(t)}}))}))}function F(e,t,n,o){const a=document.createElement("div");a.classList.add("overlay-edit");const s=document.createElement("div");s.classList.add("info-box"),a.append(s);const r=document.createElement("div");r.classList.add("heading");const c=document.createElement("h2");c.textContent="Edit Task",r.append(c),s.append(r);const d=document.createElement("hr");s.append(d);const i=document.createElement("form");i.id="form",s.append(i);const l=document.createElement("div");l.classList.add("title");const u=document.createElement("label");u.textContent="Title:";const p=document.createElement("br"),m=document.createElement("input");m.classList.add("overlay-input"),m.type="text",m.id="task-input-text4",l.append(u,p,m),i.append(l);const v=document.createElement("div");v.classList.add("due-date");const y=document.createElement("label");y.textContent="Due Date:";const f=document.createElement("br"),k=document.createElement("input");k.classList.add("overlay-input"),k.type="date",k.id="task-input-date4",v.append(y,f,k),i.append(v);const E=document.createElement("div");E.classList.add("description");const g=document.createElement("label");g.textContent="Description:";const x=document.createElement("br"),h=document.createElement("textarea");h.id="task-input-textarea4",E.append(g,x,h),i.append(E);const _=document.createElement("div");_.classList.add("priority");const L=document.createElement("label");L.textContent="Priority:";const C=document.createElement("br"),b=document.createElement("select");b.classList.add("overlay-select"),b.id="task-input-priority4",b.innerHTML='<option value="Low" selected>Low</option>\n    <option value="Medium" selected>Medium</option>\n    <option value="High" selected>High</option>',_.append(L,C,b),i.append(_);const w=document.createElement("div");w.classList.add("select-project");const T=document.createElement("label");T.textContent="Project:";const S=document.createElement("br"),j=document.createElement("select");j.classList.add("overlay-select"),j.id="task-input-project4",j.innerHTML+='<option value="" selected>N/A</option>';for(let e=0;e<M.length;e++)j.innerHTML+=`<option value="${M[e]}">${M[e]}</option>`;w.append(T,S,j),i.append(w);const D=document.createElement("div");D.classList.add("buttons");const q=document.createElement("button");q.id="close-edit-form",q.classList.add("close"),q.textContent="Close";const O=document.createElement("button");return O.id="finish-edit",O.classList.add("add-task"),O.textContent="Finish Edit",D.append(q,O),s.append(D),q.addEventListener("click",(e=>{a.remove()})),O.addEventListener("click",(s=>{e.title=m.value,e.desc=h.value,e.due=k.value,e.project=j.value,e.priority=b.value,t.textContent=e.title,n.textContent=e.desc,o.textContent=e.due,$(N,document.querySelector("#tasks-section-h2").textContent),a.remove(),console.log(N);for(let e=0;e<N.length;e++)N[e].project==document.querySelector("#tasks-section-h2").textContent&&document.querySelector(".tasks").append(U(N[e]))})),m.value=e.title,k.value=e.due,h.value=e.desc,b.value=e.priority,j.value=e.project,{overlay_edit:a,input:m,input2:k,textarea:h,select:b,select2:j,btn1:q,btn2:O}}function P(e,t,n,o,a){const s=document.createElement("div");s.classList.add("overlay3");const r=document.createElement("div");r.classList.add("info-box"),s.append(r);const c=document.createElement("div");c.classList.add("heading"),c.style.textAlign="center";const d=document.createElement("h2");d.classList.add("overlay3-title"),d.textContent=e.title,c.append(d),r.append(c);const i=document.createElement("hr");r.append(i);const l=document.createElement("div");l.classList.add("task-info"),r.append(l);const u=document.createElement("div");u.classList.add("due-date"),u.style.paddingBottom="10px";const p=document.createElement("h3");p.classList.add("h3ForTaskInfo"),p.textContent="Due Date:";const m=document.createElement("p");m.classList.add("overlay3-date"),m.textContent=e.due,u.append(p,m),l.append(u);const v=document.createElement("div");v.classList.add("description");const y=document.createElement("h3");y.classList.add("h3ForTaskInfo"),y.textContent="Description:";const f=document.createElement("p");f.classList.add("overlay3-desc"),f.textContent=e.desc,v.append(y,f),l.append(v);const k=document.createElement("div");k.classList.add("priority"),k.style.paddingBottom="10px";const E=document.createElement("h3");E.classList.add("h3ForTaskInfo"),E.textContent="Priority:";const g=document.createElement("p");g.classList.add("overlay3-priority"),g.textContent=e.priority,k.append(E,g),l.append(k);const x=document.createElement("div");x.classList.add("select-project");const h=document.createElement("h3");h.classList.add("h3ForTaskInfo"),h.textContent="Project:";const _=document.createElement("p");_.classList.add("overlay3-project"),console.log(e.project),""==e.project?_.textContent="N/A":_.textContent=e.project,x.append(h,_),l.append(x);const L=document.createElement("div");L.classList.add("buttons");const C=document.createElement("button");C.id="close-edit-task-form",C.classList.add("close"),C.textContent="Close";const b=document.createElement("button");return b.classList.add("edit-btn"),b.textContent="Edit Task",b.style.display=a,L.append(C,b),r.append(L),C.addEventListener("click",(e=>{s.remove()})),b.addEventListener("click",(a=>{s.remove(),D().content.append(F(e,t,n,o).overlay_edit)})),{overlay3:s,btn1:C,btn2:b}}function A(e,t,n,o,a){D().h2.textContent=e.textContent,e.style.backgroundColor="white",t.style.backgroundColor="",n.style.backgroundColor="",o.style.backgroundColor="",a.style.backgroundColor=""}D().add_task.addEventListener("click",(t=>{if(O.includes(D().task_input_text.value))alert("The task name is already in use");else if(!function(t,o){e(2,arguments);var a=n(t),s=n(o);return a.getTime()<s.getTime()}(d(D().task_input_date.value),D().todays_date)||s(d(D().task_input_date.value)))if(""==D().task_input_text.value||""==D().task_input_date.value||""==D().task_input_textarea.value)alert("Please complete all fields");else{const e=new H(D().task_input_text.value,D().task_input_date.value,D().task_input_textarea.value,D().task_input_priority.value,D().task_input_project.value);N.push(e),console.log(N),O.push(e.title),D().overlay.style.display="none";const t=document.querySelector(".tasks"),n=U(e);(e.project==D().h2.textContent||s(d(e.due))&&" Today"==D().h2.textContent||L(d(e.due))&&" Tomorrow"==D().h2.textContent||S(d(e.due))&&" This Week"==D().h2.textContent)&&t.append(n)}else alert("The date you have chosen has already passed")})),window.addEventListener("DOMContentLoaded",(e=>{D().today.click(),D().h2.textContent=D().today.textContent,D().task_input_project.innerHTML+='<option value="Inbox" selected>N/A</option>',I(),$(N,e.target.textContent)})),D().all_tasks.addEventListener("click",(e=>{$(N,e.target.textContent),A(e.target,D().today,D().tomorrow,D().this_week,D().completed_tasks)})),D().today.addEventListener("click",(e=>{A(e.target,D().all_tasks,D().tomorrow,D().this_week,D().completed_tasks),$(N,e.target.textContent)})),D().tomorrow.addEventListener("click",(e=>{$(N,e.target.textContent),A(e.target,D().all_tasks,D().today,D().this_week,D().completed_tasks)})),D().this_week.addEventListener("click",(e=>{$(N,e.target.textContent),A(e.target,D().all_tasks,D().today,D().tomorrow,D().completed_tasks)})),D().completed_tasks.addEventListener("click",(e=>{$(q,e.target.textContent),A(e.target,D().today,D().tomorrow,D().this_week,D().all_tasks)})),D().plus.addEventListener("click",(e=>{D().task_input_project.innerHTML='<option value="" selected>N/A</option>';for(let e=0;e<M.length;e++)D().task_input_project.innerHTML+=`<option value="${M[e]}">${M[e]}</option>`;D().overlay.style.display="flex"})),D().add_project_btn.addEventListener("click",(e=>{D().overlay2.style.display="flex"})),D().submit_project.addEventListener("click",(e=>{if(M.includes(D().project_input_text.value))alert("Project already exists");else{D().projects.append(function(e){const t=document.createElement("div");t.classList.add("project");const n=document.createElement("p");n.textContent=e;const o=document.createElement("i");return o.classList.add("fa-solid","fa-trash-can"),t.append(n,o),t.addEventListener("mouseover",(e=>{o.style.display="flex"})),t.addEventListener("mouseout",(e=>{o.style.display="none"})),o.addEventListener("click",(e=>{D().h2.textContent="",console.log("Projects Created",M),console.log("Tasks Created",N),t.remove(),M.splice(M.indexOf(n.textContent),1);for(let e=0;e<N.length;e++)for(let t in N[e])N[e][t]==n.textContent&&(N.splice(N.indexOf(N[e]),1),O.splice(O.indexOf(N[e].title),1));console.log("Projects Created",M),console.log("Tasks Created",N)})),t}(D().project_input_text.value)),M.push(D().project_input_text.value),D().overlay2.style.display="none";for(let e=M.indexOf(M[M.length-1]);e<M.length;e++)D().task_input_project.innerHTML+=`<option value="${M[e]}">${M[e]}</option>`;I()}})),D().close_task.addEventListener("click",(e=>{D().overlay.style.display="none"})),D().close_project.addEventListener("click",(e=>{D().overlay2.style.display="none"}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,